from os import environ

from dotenv import load_dotenv
from pyrogram import Client

import PyroArgs

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

#####################
#                   #
#     –ù–ê–°–¢–†–û–π–ö–ò     #
#                   #
#####################

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ PyroArgs
app = Client(
    environ['AUTH_NAME'],
    int(environ['AUTH_API_ID']),
    environ['AUTH_API_HASH'],
    bot_token=environ['BOT_TOKEN']
)
PyAr = PyroArgs.PyroArgs(app, ('/'))

# –í–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å
# PyAr.setup_logs(
#     before_use_command=True,
#     after_use_command=True,
#     missing_argument_error=True,
#     argument_type_error=True,
#     command_error=True,
#     permissions_error=True
# )


# –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@PyAr.permissions_checker
async def check(
    message: PyroArgs.types.Message,
    required_permission: int
):
    # * –£ –≤–∞—Å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤, —ç—Ç–æ –ª–∏—à—å –ø—Ä–∏–º–µ—Ä * #

    # –°–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–∏ÃÜ —Å –ø—Ä–∞–≤–∞–º–∏
    admninistrators = [123456789]
    moderators = [987654321]

    # –ù–µ —Ç—Ä–æ–≥–∞–π—Ç–µ, –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
    user_id = message.from_user.id
    current_permission = 0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
    if user_id in moderators:
        current_permission = 100  # –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä, —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∞–≤ 100

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    elif user_id in admninistrators:
        current_permission = 999  # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∞–≤ 999

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤
    return current_permission >= required_permission

####################
#                  #
#      –ò–í–ï–ù–¢–´      #
#                  #
####################


# –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –≤ –∫–æ–º–∞–Ω–¥–µ
@PyAr.events.on_before_use_command
async def on_before_use_command(
    client: Client,
    command: str,
    args: list,
    kwargs: dict
):
    # * –£ –≤–∞—Å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, —ç—Ç–æ –ª–∏—à—å –ø—Ä–∏–º–µ—Ä * #

    print(f'‚è±Ô∏è –ö–æ–º–∞–Ω–¥–∞ "{command}" –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...')


# –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –≤ –∫–æ–º–∞–Ω–¥–µ
@PyAr.events.on_after_use_command
async def on_after_use_command(
    client: Client,
    command: str,
    args: list,
    kwargs: dict
):
    # * –£ –≤–∞—Å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, —ç—Ç–æ –ª–∏—à—å –ø—Ä–∏–º–µ—Ä * #

    print(f'‚úÖ –ö–æ–º–∞–Ω–¥–∞ "{command}" –∑–∞–≤–µ—Ä—à–∏–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ!')


# –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
@PyAr.events.on_missing_argument_error
async def on_missing_argument_error(
    message: PyroArgs.types.Message,
    error: PyroArgs.errors.MissingArgumentError
):
    # * –£ –≤–∞—Å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, —ç—Ç–æ –ª–∏—à—å –ø—Ä–∏–º–µ—Ä * #

    await message.reply(f'‚ùå –í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç: `{error.name}`!', quote=True)


# –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ç–∏–ø–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
@PyAr.events.on_argument_type_error
async def on_argument_type_error(
    message: PyroArgs.types.Message,
    error: PyroArgs.errors.ArgumentTypeError
):
    # * –£ –≤–∞—Å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, —ç—Ç–æ –ª–∏—à—å –ø—Ä–∏–º–µ—Ä * #

    await message.reply(f'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–∏ÃÜ —Ç–∏–ø –∞—Ä–≥—É–º–µ–Ω—Ç–∞: `{error.name}`!', quote=True)


# –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏ –≤ –∫–æ–º–∞–Ω–¥–µ
@PyAr.events.on_command_error
async def on_command_error(
    message: PyroArgs.types.Message,
    error: PyroArgs.errors.CommandError
):
    # * –£ –≤–∞—Å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, —ç—Ç–æ –ª–∏—à—å –ø—Ä–∏–º–µ—Ä * #

    await message.reply(f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ: `{error.command}`!', quote=True)


# –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø—Ä–∞–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@PyAr.events.on_command_permission_error
async def on_command_permission_error(
    message: PyroArgs.types.Message,
    error: PyroArgs.errors.CommandPermissionError
):
    # * –£ –≤–∞—Å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, —ç—Ç–æ –ª–∏—à—å –ø—Ä–∏–º–µ—Ä * #

    await message.reply(f'‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: `{error.command}`!', quote=True)


###################
#                 #
#     –ö–û–ú–ê–ù–î–´     #
#                 #
###################


# –ö–æ–º–∞–Ω–¥–∞ –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@PyAr.command(
    description='–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥',
    usage='/help',
    example='/help',
)
async def help(message: PyroArgs.types.Message):
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    help_text = '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n'

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for category, commands in PyAr.registry.iterate_categories_with_commands():
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        help_text += f'**–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}**\n'

        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
        for cmd in commands:
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
            if await PyAr.permission_checker_func(message, cmd.permissions):
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
                help_text += f'/**{cmd.command}** - `{cmd.description}`\n'
                help_text += f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `{cmd.usage}`\n'
                help_text += f'–ü—Ä–∏–º–µ—Ä: `{cmd.example}`\n\n'

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.reply(help_text)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
@PyAr.command(
    description='–ü–æ–≤—Ç–æ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç',
    usage='/echo [—Ç–µ–∫—Å—Ç]',
    example='/echo –ü—Ä–∏–≤–µ—Ç!',
)
async def echo(message: PyroArgs.types.Message, *, text: str):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
    if not text:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–∏ÃÜ, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        return await message.reply('‚ùå –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–∏ÃÜ —Ç–µ–∫—Å—Ç!', quote=True)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    await message.reply(text)


@PyAr.command(
    description='–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∞–∫–∫–∞—É–Ω—Ç–µ',
    usage='/info',
    example='/info',
)
async def info(message: PyroArgs.types.Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    await message.reply(
        f'üë§ –ò–º—è: `{message.from_user.first_name}`\n'
        f'üÜî ID: `{message.from_user.id}`'
    )


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ñ–µ–π–∫–æ–≤–æ–≥–æ –±–∞–Ω–∞
@PyAr.command(
    description='–§–µ–∏ÃÜ–∫–æ–≤—ã–∏ÃÜ –±–∞–Ω',
    usage='/ban [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] (–≤—Ä–µ–º—è) (–ø—Ä–∏—á–∏–Ω–∞)',
    example='/ban @user 200 –°–ø–∞–º',
    permissions_level=1
)
async def ban(
    message: PyroArgs.types.Message,
    user: str,
    ban_time: int = 120,
    *,
    reason: str
):
    # –§–µ–∏ÃÜ–∫–æ–≤—ã–∏ÃÜ –±–∞–Ω
    await message.reply(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{user}` –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ `{ban_time}` —Å–µ–∫—É–Ω–¥ –ø–æ –ø—Ä–∏—á–∏–Ω–µ: `{reason}`.')


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –æ—à–∏–±–∫–∏
@PyAr.command(
    description='–í—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ',
    usage='/error',
    example='/error',
)
async def error(message: PyroArgs.types.Message):
    print(1 / 0)  # –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ "ZeroDivisionError" –¥–ª—è —Ç–µ—Å—Ç–∞


# –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
app.run()
